//
//PIC24FJ128GA010 Configuration Bit Settings
// For more on Configuration Bits, see Section 1.1
// consult your device data sheet
// CONFIG2
#pragma config POSCMOD = XT // XT Oscillator mode selected
#pragma config OSCIOFNC = ON // OSC2/CLKO/RC15 as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON // Int Ext Switch Over Mode enabled
// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128 // WDT Prescaler (1:128)
#pragma config WINDIS = ON // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF // Watchdog Timer disabled
#pragma config ICS = PGx2 //
//Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF // Writes to program memory allowed
#pragma config GCP = OFF // Code protection is disabled
#pragma config JTAGEN = OFF // JTAG port is disabled
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <libpic30.h>
#include <math.h>
#include "buttons.h"
#include<time.h>
#include<stdio.h>
#include<stdlib.h>
#include "adc.h"
#include <xc.h>
#include <libpic30.h>
#include <stdio.h>
#include <string.h>
#include "lcd.h"
#include "buttons.h"
#define TOTAL_TIME (8) // w sekundach

unsigned char gen_pseudo_s(unsigned char seed);

int binar_gora(){
    unsigned char portValue;
    int i = 0;
    while(i < 255) {
        portValue = i;
        LATA = portValue; // write to port latch
        // delay value change
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i += 1;
//        portValue = 0xAA;
//        LATA = portValue; // write to port latch
//        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int binar_dol(){
    unsigned char portValue;
    int i = 255;
    while(i >= 0) {
        portValue = i;
        LATA = portValue; // write to port latch
        // delay value change
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i -= 1;
//        portValue = 0xAA;
//        LATA = portValue; // write to port latch
//        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int binar_gora_grey(){
    unsigned char portValue;
    int i = 0;
    while(i < 255) {
        int j = i ^ (i >> 1);
        portValue = j;
        LATA = portValue; // write to port latch
        // delay value change
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i += 1;
//        portValue = 0xAA;
//        LATA = portValue; // write to port latch
//        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int binar_dol_grey(){
    unsigned char portValue;
    int i = 255;
    while(i >= 0) {
        int j = i ^ (i >> 1);
        portValue = j;
        LATA = portValue; // write to port latch
        // delay value change
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i -= 1;
//        portValue = 0xAA;
//        LATA = portValue; // write to port latch
//        __delay32(1500000); // delay in instruction cycles
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int binar_gora_bcd(){
    unsigned char portValue;
    int i = 0;
    while(i <= 99){
        int tens = i / 10;
        int ones = i % 10;
        int bcd_tens = (tens << 4) & 0xF0;
        int bcd_ones = ones & 0x0F;
        int bcd = bcd_tens | bcd_ones;
        portValue = bcd;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i += 1;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int binar_dol_bcd(){
    unsigned char portValue;
    int i = 99;
    while(i >= 0){
        int tens = i / 10;
        int ones = i % 10;
        int bcd_tens = (tens << 4) & 0xF0;
        int bcd_ones = ones & 0x0F;
        int bcd = bcd_tens | bcd_ones;
        portValue = bcd;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        i -= 1;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int wezyk(){
    unsigned char portValue;
    int a = 7;
    int b = 14;
    int c = 28;
    int d = 56;
    int e = 112;
    int f = 224;
    portValue = 7;
    LATA = portValue;
    __delay32(1500000);
    while(1){
        portValue = a;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = b;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = c;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = d;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = e;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = f;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = e;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = d;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = c;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        portValue = b;
        LATA = portValue;
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

int kolejka(){
    unsigned char portValue;
    //portValue = 0;
    LATA = portValue;
    if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    __delay32(1500000);
    if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    int j = 0;
    int aktualny_pow = 7;
    int lewe[] = {0, 128, 192, 224, 240, 248, 252, 254, 255};
    while(portValue <= 255){
        for(int i = 0; i<=aktualny_pow; i++){
            portValue = lewe[j];
            if(portValue == 255){
                continue;
            }
            portValue += pow(2,i);
            LATA = portValue;
            __delay32(1500000);
            if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
        }
        j += 1;
        aktualny_pow -= 1;
    }
}

unsigned char generateRandom(unsigned char *state) {
    // Konfiguracja 1110011
    unsigned char new_bit = ((*state >> 6) ^ (*state >> 5) ^ (*state >> 4) ^
                            (*state >> 2) ^ (*state >> 1) ^ (*state)) & 0x01;
    *state = (*state << 1) | new_bit;
    return *state;
}

int gen_pseudo_2(){
    unsigned char value = 0b1110011;
    while(1){
        value = gen_pseudo_s(value);
        LATA = value;
        __delay32(1500000);
        if(BUTTON_IsPressed (BUTTON_S3) || BUTTON_IsPressed (BUTTON_S4)) return 0;
    }
}

unsigned char gen_pseudo_s(unsigned char seed){
    return (((seed & (1 << 6)) ^ (seed & (1 << 5)) ^
        (seed & (1 << 4)) ^ (seed & (1 << 1)) ^ (seed & 1)) << 6) | (seed >> 1);
}

int alarm(){
    unsigned int value;
    int alarmzal = 1;
    while(alarmzal){
        value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
        
        if (value == 0xFFFF) {
            // W razie czego przechodzimy do kolejnej iteracji
                continue;
            }
        unsigned char normalizedValue = value >> 2;
        for(int i = 0; i < 5; i++){
            LATA = 0;
            if (normalizedValue <= 127){
                return 0;
            }
            __delay32(2000000);
            LATA = 1;
            __delay32(2000000);
        }
        if (normalizedValue <= 127){
                return 0;
            }
        LATA = 255;
        alarmzal = 0;
//kiedy przekroczy polowe, to miga 5 razy, i jesli potencjometr jest <1/2 to 
        // wylacza sie alarm, a jesli >1/2 to dalej miga
        
    }
    
}

int main(void) {
//    ZADANIE 1
//    
    unsigned char portValue;
    // Port A access
    AD1PCFG = 0xFFFF; // set to digital I/O (not analog)
    TRISA = 0x0000; // set all port bits to be output
    //int i = 0;
    portValue = 0;
    LATA = portValue;
    char button = 0b00000001;
//    while(1){
//        if(BUTTON_IsPressed (BUTTON_S3) == true){
//            button--;
//            if(button == 0b00000000) button = 0b00001001;
//            __delay32(1000000);
//        } else if(BUTTON_IsPressed (BUTTON_S4) == true){
//            button++;
//            if(button == 0b00001010) button = 0b00000001;
//            __delay32(1000000);
//        }
//        switch(button){
//            case 1:
//                binar_gora();
//                break;
//            case 2:
//                binar_dol();
//                break;
//            case 3:
//                binar_gora_grey();
//                break;
//            case 4:
//                binar_dol_grey();
//                break;
//            case 5:
//                binar_gora_bcd();
//                break;
//            case 6:
//                binar_dol_bcd();
//                break;
//            case 7:
//                wezyk();
//                break;
//            case 8:
//                kolejka();
//                break;
//            case 9:
//                gen_pseudo_2();
//                break;
//        }
//    }
    
    
    
    // ZADANIE 2
//    // Domy?lna konfiguracja ADC
//    ADC_SetConfiguration(ADC_CONFIGURATION_DEFAULT);
//    // ADC ma czyta? potencjometr
//    ADC_ChannelEnable(ADC_CHANNEL_POTENTIOMETER);
//    // o utput LED ów PORT A
//    TRISA = 0x0000;
//    unsigned int value;
//    int czy_alarm_b = 1;
//    while (1){
//    // Czytanie 10-bit warto?ci z potencjometru
//        value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
//    // B??d?
//        if (value == 0xFFFF) {
//        // W razie czego przechodzimy do kolejnej iteracji
//            continue;
//        }
//    // normalizacja zakresu do 0 255
//        unsigned char normalizedValue = value >> 2;
//        if (BUTTON_IsPressed (BUTTON_S3) == true){
//            if(czy_alarm_b == 1){
//                czy_alarm_b = 0;
//            }
//            else{
//                czy_alarm_b = 1;
//            }
//        }
//        LATA = 0;
//        if (normalizedValue > 127 && czy_alarm_b == 1){
//            while(1){
//                
//                //miganie przez 5 sekund
//                for(int i = 0; i < 5; i++){
//                    value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
//                    if (value == 0xFFFF) {
//                    // W razie czego przechodzimy do kolejnej iteracji
//                        break;
//                    }
//                    unsigned char normalizedValue = value >> 2;
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                    LATA = 1;
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                    __delay32(2000000);
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                    LATA = 0;
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                    __delay32(2000000);
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                }
//                
//                
//                value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
//                if (value == 0xFFFF) {
//                // W razie czego przechodzimy do kolejnej iteracji
//                    continue;
//                }
//                unsigned char normalizedValue = value >> 2;
//                //LATA = normalizedValue;
//                    
//                // wszystkie zapalone
//                if (normalizedValue > 127 && czy_alarm_b == 1){
//                    while(1){
//                    value = ADC_Read10bit(ADC_CHANNEL_POTENTIOMETER);
//                    if (value == 0xFFFF) {
//                    // W razie czego przechodzimy do kolejnej iteracji
//                        continue;
//                    }
//                    unsigned char normalizedValue = value >> 2;
//                    if (czy_alarm_b == 0){
//                        break;
//                    }
//                    if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                    if (normalizedValue <= 127){
//                        LATA = 0;
//                        break;
//                    }
//                    
//                    
//                    LATA = 255;
//                    }
//                }
//                if (czy_alarm_b == 0){
//                    break;
//                }
//                if (BUTTON_IsPressed (BUTTON_S3) == true){
//                        czy_alarm_b = 0;
//                        break;
//                    }
//                if (normalizedValue <= 127){
//                        //LATA = normalizedValue;
//                        break;
//                }
//            }            
//        }
//        else{
//            //LATA = normalizedValue;
//        }
//    }
    
    
    
    
    // ZADANIE 5
    
//    volatile unsigned int seconds = TOTAL_TIME;
//    
//    char buffer[16]; // bufor na znaki do wy?wietlenia na ekranie
//    char buffer_b[16];
//    LCD_Initialize(); // inicjalizacja LCD
//    unsigned int remainingSeconds = seconds;
//    unsigned int remainingSeconds_b = seconds;
//    int gracz = 0;
//    int remis = 0;
//    int mat = 0;
//    
//    while(remainingSeconds > 0 && remainingSeconds_b > 0 && !remis && !mat) {
//        if (BUTTON_IsPressed ( BUTTON_S3 ) == true) {
//            gracz = 1;
//        } 
//        else if ((BUTTON_IsPressed ( BUTTON_S4 ) == true)) {
//            gracz = 0;
//        }
//        if (BUTTON_IsPressed ( BUTTON_S6) == true){
//            remis = 1;
//            break;
//        }
////        if (BUTTON_IsPressed ( BUTTON_S5 ) == true){
////            
////            mat = 1;
////            break;
////        }
//        unsigned char minutes = remainingSeconds / 60;
//        unsigned char secs = remainingSeconds % 60;
//        unsigned char minutes_b = remainingSeconds_b / 60;
//        unsigned char secs_b = remainingSeconds_b % 60;
//        sprintf(buffer, "%02u:%02u", minutes, secs); // zapis czasu do bufora
//        sprintf(buffer_b, "      %02u:%02u", minutes_b, secs_b);
//        // wy?wietlenie na ekranie
//        LCD_ClearScreen();
//        LCD_PutString(buffer, strlen(buffer));
//        LCD_PutString(buffer_b, strlen(buffer_b));
//        __delay32(4000000); //czekamy sekund?
//        if(gracz == 0){
//            remainingSeconds--;
//        }
//        else{
//            remainingSeconds_b--;
//        }
//    }
//    if(remainingSeconds <= 0){
//        sprintf(buffer, "%12s", "gracz 1 przegryw");
//    }
//    if(remainingSeconds_b <= 0){
//        sprintf(buffer, "%12s", "gracz 2 przegryw");
//    }
//    if(remis == 1){
//        sprintf(buffer, "%5s", "remis");
//    }
//    if(mat == 1){
//        sprintf(buffer, "%3s", "mat");
//    }
//    LCD_ClearScreen();
//    LCD_PutString(buffer, strlen(buffer));
//    __delay32(20000000); //czekamy 10 sekund      //5 sekund

    
    // ZADANIE 4
    
    return 0;
}
